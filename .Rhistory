# Skeleton code for Data Analysis Project: EC:6062
# Student Name: (please complete)
# Student ID: (please complete)
# -------------------------------------------
# Step 1: Install Packages (remove # to install if needed)
# install.packages("tidyverse")
# install.packages("magrittr")
# install.packages("stargazer")
# install.packages("dplyr")
# install.packages("writexl")
# install.packages("car")
# install.packages("lmtest")
# install.packages("RCurl")
# install.packages("readxl")
# install.packages("expss")
# install.packages("maditr")
# install.packages("broom")
# install.packages("mosaic")
# -------------------------------------------
# Step 2: Load Libraries
library(tidyverse)
library(magrittr)
library(stargazer)
library(dplyr)
library(writexl)
library(lmtest)
library(car)
library(readxl)
library(expss)
library(maditr)
library(broom)
library(mosaic)
# Import the function to calculate Robust Standard Errors
library(RCurl)
url_robust <- "https://raw.githubusercontent.com/IsidoreBeautrelet/economictheoryblog/master/robust_summary.R"
eval(parse(text = getURL(url_robust, ssl.verifypeer = FALSE)), envir = .GlobalEnv)
# -------------------------------------------
# Step 3: Set Working Directory and Load Data
setwd("C:/Users/yoges/Desktop/Econometrics")
list.files()  # Check if data file is listed
data <- read_excel("Firms_data.xlsx")
# Apply labels to the variables
data <- apply_labels(data,
ID = "Unique Identifier",
log_profits = "Firms profits in 2024 in Natural Logs",
log_training = "Total investments in Training between 2022 and 2023 in Logs",
log_equipment = "Total investments in Capital Equipment between 2022 and 2023 in Logs",
Enterprise_Group = "Does the firm belong to an Enterprise Group, 1 = Yes",
Firm_Age = "Year of the firm since registration to 2024",
Export_yes_no = "The firm is an exporting firm, 1= Yes",
Small_Firm = "The firm has fewer than 50 employees",
Industrial_sector = "Industrial Sector codes",
innovation_yes = "The firm introduced new products or services to market during 2022 and 2023",
Employees_log = "Total number of employees in logs in 2024",
R_D_yes = "The firm invested in R&D during 2022 and 2023, 1 = yes")
# -------------------------------------------
# Step 4: Explore Data (Descriptive Statistics and Plots)
# Scatterplot: Profits vs Training Investment
ggplot(data, aes(x = log_training, y = log_profits)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatterplot: Profits vs Training Investment",
x = "Log of Training Investment",
y = "Log of Profits")
# Scatterplot: Profits vs Equipment Investment
ggplot(data, aes(x = log_equipment, y = log_profits)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatterplot: Profits vs Equipment Investment",
x = "Log of Equipment Investment",
y = "Log of Profits")
# -------------------------------------------
# Step 5: Run Simple Regressions
# Model 1: Profits ~ Training
model_training <- lm(log_profits ~ log_training, data = data)
summary(model_training)
# Model 2: Profits ~ Equipment
model_equipment <- lm(log_profits ~ log_equipment, data = data)
summary(model_equipment)
# -------------------------------------------
# Step 6: Run Multiple Regression
# Model 3: Profits ~ Training + Equipment
model_training_equipment <- lm(log_profits ~ log_training + log_equipment, data = data)
summary(model_training_equipment)
# Full Model: Profits ~ Training + Equipment + Controls
# Ensure Industrial Sector is treated as a factor
data$Industrial_sector <- factor(data$Industrial_sector)
model_full <- lm(log_profits ~ log_training + log_equipment + Firm_Age + Employees_log +
Export_yes_no + Enterprise_Group + Small_Firm +
innovation_yes + R_D_yes + Industrial_sector, data = data)
summary(model_full)
# -------------------------------------------
# Step 7: Check for Heteroskedasticity
# Plot Residuals vs Fitted Values
plot(fitted(model_full), resid(model_full),
xlab = "Fitted values",
ylab = "Residuals",
main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
# Breusch-Pagan Test
bptest(model_full)
# -------------------------------------------
# Step 8: Run Separate Models for Small and Large Firms
small_firms <- data %>% filter(Small_Firm == 1)
large_firms <- data %>% filter(Small_Firm == 0)
# Model for Small Firms
model_small <- lm(log_profits ~ log_training + log_equipment + Firm_Age + Employees_log +
Export_yes_no + Enterprise_Group + innovation_yes + R_D_yes + Industrial_sector,
data = small_firms)
summary(model_small, robust = TRUE)
# Model for Large Firms
model_large <- lm(log_profits ~ log_training + log_equipment + Firm_Age + Employees_log +
Export_yes_no + Enterprise_Group + innovation_yes + R_D_yes + Industrial_sector,
data = large_firms)
summary(model_large, robust = TRUE)
# -------------------------------------------
# Step 9: Create Regression Results Table
models_list <- list(model_training, model_equipment, model_training_equipment, model_full, model_small, model_large)
stargazer(models_list,
type = "text",
title = "Regression Results with Robust Standard Errors",
dep.var.labels = "Log(Profits)",
column.labels = c("Training Only", "Equipment Only", "Training + Equipment", "Full Model", "Small Firms", "Large Firms"),
se = list(
coef(summary(model_training, robust = TRUE))[, "Std. Error"],
coef(summary(model_equipment, robust = TRUE))[, "Std. Error"],
coef(summary(model_training_equipment, robust = TRUE))[, "Std. Error"],
coef(summary(model_full, robust = TRUE))[, "Std. Error"],
coef(summary(model_small, robust = TRUE))[, "Std. Error"],
coef(summary(model_large, robust = TRUE))[, "Std. Error"]
),
digits = 3,
no.space = TRUE)
# -------------------------------------------
# Done! Ensure to save and submit this R script with your report!
stargazer(data, type = "text", summary = TRUE)
library(dplyr)
# Create Descriptive Statistics Table with Missing Values Count
descriptive_stats <- data %>%
select(log_profits, log_training, log_equipment, Firm_Age, Employees_log,
Export_yes_no, Enterprise_Group, Small_Firm, innovation_yes, R_D_yes, Industrial_sector) %>%
summarise_all(list(
Mean = ~mean(., na.rm = TRUE),
SD = ~sd(., na.rm = TRUE),
Min = ~min(., na.rm = TRUE),
Max = ~max(., na.rm = TRUE),
Missing = ~sum(is.na(.))
))
# Skeleton code for Data Analysis Project: EC:6062
# Student Name: (please complete)
# Student ID: (please complete)
# -------------------------------------------
# Step 1: Install Packages (remove # to install if needed)
# install.packages("tidyverse")
# install.packages("magrittr")
# install.packages("stargazer")
# install.packages("dplyr")
# install.packages("writexl")
# install.packages("car")
# install.packages("lmtest")
# install.packages("RCurl")
# install.packages("readxl")
# install.packages("expss")
# install.packages("maditr")
# install.packages("broom")
# install.packages("mosaic")
# -------------------------------------------
# Step 2: Load Libraries
library(tidyverse)
library(magrittr)
library(stargazer)
library(dplyr)
library(writexl)
library(lmtest)
library(car)
library(readxl)
library(expss)
library(maditr)
library(broom)
library(mosaic)
# Import the function to calculate Robust Standard Errors
library(RCurl)
url_robust <- "https://raw.githubusercontent.com/IsidoreBeautrelet/economictheoryblog/master/robust_summary.R"
eval(parse(text = getURL(url_robust, ssl.verifypeer = FALSE)), envir = .GlobalEnv)
# -------------------------------------------
# Step 3: Set Working Directory and Load Data
setwd("C:/Users/yoges/Desktop/Econometrics")
list.files()  # Check if data file is listed
data <- read_excel("Firms_data.xlsx")
# Apply labels to the variables
data <- apply_labels(data,
ID = "Unique Identifier",
log_profits = "Firms profits in 2024 in Natural Logs",
log_training = "Total investments in Training between 2022 and 2023 in Logs",
log_equipment = "Total investments in Capital Equipment between 2022 and 2023 in Logs",
Enterprise_Group = "Does the firm belong to an Enterprise Group, 1 = Yes",
Firm_Age = "Year of the firm since registration to 2024",
Export_yes_no = "The firm is an exporting firm, 1= Yes",
Small_Firm = "The firm has fewer than 50 employees",
Industrial_sector = "Industrial Sector codes",
innovation_yes = "The firm introduced new products or services to market during 2022 and 2023",
Employees_log = "Total number of employees in logs in 2024",
R_D_yes = "The firm invested in R&D during 2022 and 2023, 1 = yes")
# -------------------------------------------
# Step 4: Explore Data (Descriptive Statistics and Plots)
# Scatterplot: Profits vs Training Investment
ggplot(data, aes(x = log_training, y = log_profits)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatterplot: Profits vs Training Investment",
x = "Log of Training Investment",
y = "Log of Profits")
# Scatterplot: Profits vs Equipment Investment
ggplot(data, aes(x = log_equipment, y = log_profits)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatterplot: Profits vs Equipment Investment",
x = "Log of Equipment Investment",
y = "Log of Profits")
# -------------------------------------------
# Step 5: Run Simple Regressions
# Model 1: Profits ~ Training
model_training <- lm(log_profits ~ log_training, data = data)
summary(model_training)
# Model 2: Profits ~ Equipment
model_equipment <- lm(log_profits ~ log_equipment, data = data)
summary(model_equipment)
# -------------------------------------------
# Step 6: Run Multiple Regression
# Model 3: Profits ~ Training + Equipment
model_training_equipment <- lm(log_profits ~ log_training + log_equipment, data = data)
summary(model_training_equipment)
# Full Model: Profits ~ Training + Equipment + Controls
# Ensure Industrial Sector is treated as a factor
#data$Industrial_sector <- factor(data$Industrial_sector)
model_full <- lm(log_profits ~ log_training + log_equipment + Firm_Age + Employees_log +
Export_yes_no + Enterprise_Group + Small_Firm +
innovation_yes + R_D_yes + Industrial_sector, data = data)
summary(model_full)
# -------------------------------------------
# Step 7: Check for Heteroskedasticity
# Plot Residuals vs Fitted Values
plot(fitted(model_full), resid(model_full),
xlab = "Fitted values",
ylab = "Residuals",
main = "Residuals vs Fitted Values")
abline(h = 0, col = "red")
# Breusch-Pagan Test
bptest(model_full)
# -------------------------------------------
# Step 8: Run Separate Models for Small and Large Firms
small_firms <- data %>% filter(Small_Firm == 1)
large_firms <- data %>% filter(Small_Firm == 0)
# Model for Small Firms
model_small <- lm(log_profits ~ log_training + log_equipment + Firm_Age + Employees_log +
Export_yes_no + Enterprise_Group + innovation_yes + R_D_yes + Industrial_sector,
data = small_firms)
summary(model_small, robust = TRUE)
# Model for Large Firms
model_large <- lm(log_profits ~ log_training + log_equipment + Firm_Age + Employees_log +
Export_yes_no + Enterprise_Group + innovation_yes + R_D_yes + Industrial_sector,
data = large_firms)
summary(model_large, robust = TRUE)
# -------------------------------------------
# Step 9: Create Regression Results Table
models_list <- list(model_training, model_equipment, model_training_equipment, model_full, model_small, model_large)
stargazer(models_list,
type = "text",
title = "Regression Results with Robust Standard Errors",
dep.var.labels = "Log(Profits)",
column.labels = c("Training Only", "Equipment Only", "Training + Equipment", "Full Model", "Small Firms", "Large Firms"),
se = list(
coef(summary(model_training, robust = TRUE))[, "Std. Error"],
coef(summary(model_equipment, robust = TRUE))[, "Std. Error"],
coef(summary(model_training_equipment, robust = TRUE))[, "Std. Error"],
coef(summary(model_full, robust = TRUE))[, "Std. Error"],
coef(summary(model_small, robust = TRUE))[, "Std. Error"],
coef(summary(model_large, robust = TRUE))[, "Std. Error"]
),
digits = 3,
no.space = TRUE)
# -------------------------------------------
# Done! Ensure to save and submit this R script with your report!
library(dplyr)
# Create Descriptive Statistics Table with Missing Values Count
descriptive_stats <- data %>%
select(log_profits, log_training, log_equipment, Firm_Age, Employees_log,
Export_yes_no, Enterprise_Group, Small_Firm, innovation_yes, R_D_yes, Industrial_sector) %>%
summarise_all(list(
Mean = ~mean(., na.rm = TRUE),
SD = ~sd(., na.rm = TRUE),
Min = ~min(., na.rm = TRUE),
Max = ~max(., na.rm = TRUE),
Missing = ~sum(is.na(.))
))
# View the Table
print(descriptive_stats)
descriptive_stats <- data %>%
select(log_profits, log_training, log_equipment, Firm_Age, Employees_log,
Export_yes_no, Enterprise_Group, Small_Firm, innovation_yes, R_D_yes, Industrial_sector) %>%
summarise(
across(everything(), list(
Mean = ~mean(., na.rm = TRUE),
SD = ~sd(., na.rm = TRUE),
Min = ~min(., na.rm = TRUE),
Max = ~max(., na.rm = TRUE),
Missing = ~sum(is.na(.))
), .names = "{.col}_{.fn}")
) %>%
pivot_longer(cols = everything(),
names_to = c("Variable", "Statistic"),
names_sep = "_",
values_to = "Value") %>%
pivot_wider(names_from = "Statistic", values_from = "Value")
# View the Table
print(descriptive_stats)
descriptive_stats <- data %>%
summarise(
log_profits_Mean = mean(log_profits, na.rm = TRUE),
log_profits_SD = sd(log_profits, na.rm = TRUE),
log_profits_Min = min(log_profits, na.rm = TRUE),
log_profits_Max = max(log_profits, na.rm = TRUE),
log_profits_Missing = sum(is.na(log_profits)),
log_training_Mean = mean(log_training, na.rm = TRUE),
log_training_SD = sd(log_training, na.rm = TRUE),
log_training_Min = min(log_training, na.rm = TRUE),
log_training_Max = max(log_training, na.rm = TRUE),
log_training_Missing = sum(is.na(log_training)),
log_equipment_Mean = mean(log_equipment, na.rm = TRUE),
log_equipment_SD = sd(log_equipment, na.rm = TRUE),
log_equipment_Min = min(log_equipment, na.rm = TRUE),
log_equipment_Max = max(log_equipment, na.rm = TRUE),
log_equipment_Missing = sum(is.na(log_equipment)),
Firm_Age_Mean = mean(Firm_Age, na.rm = TRUE),
Firm_Age_SD = sd(Firm_Age, na.rm = TRUE),
Firm_Age_Min = min(Firm_Age, na.rm = TRUE),
Firm_Age_Max = max(Firm_Age, na.rm = TRUE),
Firm_Age_Missing = sum(is.na(Firm_Age)),
Employees_log_Mean = mean(Employees_log, na.rm = TRUE),
Employees_log_SD = sd(Employees_log, na.rm = TRUE),
Employees_log_Min = min(Employees_log, na.rm = TRUE),
Employees_log_Max = max(Employees_log, na.rm = TRUE),
Employees_log_Missing = sum(is.na(Employees_log)),
Export_yes_no_Mean = mean(Export_yes_no, na.rm = TRUE),
Export_yes_no_SD = sd(Export_yes_no, na.rm = TRUE),
Export_yes_no_Min = min(Export_yes_no, na.rm = TRUE),
Export_yes_no_Max = max(Export_yes_no, na.rm = TRUE),
Export_yes_no_Missing = sum(is.na(Export_yes_no)),
Enterprise_Group_Mean = mean(Enterprise_Group, na.rm = TRUE),
Enterprise_Group_SD = sd(Enterprise_Group, na.rm = TRUE),
Enterprise_Group_Min = min(Enterprise_Group, na.rm = TRUE),
Enterprise_Group_Max = max(Enterprise_Group, na.rm = TRUE),
Enterprise_Group_Missing = sum(is.na(Enterprise_Group)),
Small_Firm_Mean = mean(Small_Firm, na.rm = TRUE),
Small_Firm_SD = sd(Small_Firm, na.rm = TRUE),
Small_Firm_Min = min(Small_Firm, na.rm = TRUE),
Small_Firm_Max = max(Small_Firm, na.rm = TRUE),
Small_Firm_Missing = sum(is.na(Small_Firm)),
innovation_yes_Mean = mean(innovation_yes, na.rm = TRUE),
innovation_yes_SD = sd(innovation_yes, na.rm = TRUE),
innovation_yes_Min = min(innovation_yes, na.rm = TRUE),
innovation_yes_Max = max(innovation_yes, na.rm = TRUE),
innovation_yes_Missing = sum(is.na(innovation_yes)),
R_D_yes_Mean = mean(R_D_yes, na.rm = TRUE),
R_D_yes_SD = sd(R_D_yes, na.rm = TRUE),
R_D_yes_Min = min(R_D_yes, na.rm = TRUE),
R_D_yes_Max = max(R_D_yes, na.rm = TRUE),
R_D_yes_Missing = sum(is.na(R_D_yes)),
Industrial_sector_Mean = mean(Industrial_sector, na.rm = TRUE),
Industrial_sector_SD = sd(Industrial_sector, na.rm = TRUE),
Industrial_sector_Min = min(Industrial_sector, na.rm = TRUE),
Industrial_sector_Max = max(Industrial_sector, na.rm = TRUE),
Industrial_sector_Missing = sum(is.na(Industrial_sector))
)
# Now pivot it nicely into a long table
library(tidyr)
descriptive_stats_long <- descriptive_stats %>%
pivot_longer(cols = everything(),
names_to = c("Variable", "Statistic"),
names_sep = "_",
values_to = "Value") %>%
pivot_wider(names_from = Statistic, values_from = Value)
# View the proper Descriptive Statistics Table
print(descriptive_stats_long)
library(dplyr)
# Create Descriptive Statistics Table with Missing Values Count
descriptive_stats <- data %>%
summarise(
log_profits_Mean = mean(log_profits, na.rm = TRUE),
log_profits_SD = sd(log_profits, na.rm = TRUE),
log_profits_Min = min(log_profits, na.rm = TRUE),
log_profits_Max = max(log_profits, na.rm = TRUE),
log_profits_Missing = sum(is.na(log_profits)),
log_training_Mean = mean(log_training, na.rm = TRUE),
log_training_SD = sd(log_training, na.rm = TRUE),
log_training_Min = min(log_training, na.rm = TRUE),
log_training_Max = max(log_training, na.rm = TRUE),
log_training_Missing = sum(is.na(log_training)),
log_equipment_Mean = mean(log_equipment, na.rm = TRUE),
log_equipment_SD = sd(log_equipment, na.rm = TRUE),
log_equipment_Min = min(log_equipment, na.rm = TRUE),
log_equipment_Max = max(log_equipment, na.rm = TRUE),
log_equipment_Missing = sum(is.na(log_equipment)),
Firm_Age_Mean = mean(Firm_Age, na.rm = TRUE),
Firm_Age_SD = sd(Firm_Age, na.rm = TRUE),
Firm_Age_Min = min(Firm_Age, na.rm = TRUE),
Firm_Age_Max = max(Firm_Age, na.rm = TRUE),
Firm_Age_Missing = sum(is.na(Firm_Age)),
Employees_log_Mean = mean(Employees_log, na.rm = TRUE),
Employees_log_SD = sd(Employees_log, na.rm = TRUE),
Employees_log_Min = min(Employees_log, na.rm = TRUE),
Employees_log_Max = max(Employees_log, na.rm = TRUE),
Employees_log_Missing = sum(is.na(Employees_log)),
Export_yes_no_Mean = mean(Export_yes_no, na.rm = TRUE),
Export_yes_no_SD = sd(Export_yes_no, na.rm = TRUE),
Export_yes_no_Min = min(Export_yes_no, na.rm = TRUE),
Export_yes_no_Max = max(Export_yes_no, na.rm = TRUE),
Export_yes_no_Missing = sum(is.na(Export_yes_no)),
Enterprise_Group_Mean = mean(Enterprise_Group, na.rm = TRUE),
Enterprise_Group_SD = sd(Enterprise_Group, na.rm = TRUE),
Enterprise_Group_Min = min(Enterprise_Group, na.rm = TRUE),
Enterprise_Group_Max = max(Enterprise_Group, na.rm = TRUE),
Enterprise_Group_Missing = sum(is.na(Enterprise_Group)),
Small_Firm_Mean = mean(Small_Firm, na.rm = TRUE),
Small_Firm_SD = sd(Small_Firm, na.rm = TRUE),
Small_Firm_Min = min(Small_Firm, na.rm = TRUE),
Small_Firm_Max = max(Small_Firm, na.rm = TRUE),
Small_Firm_Missing = sum(is.na(Small_Firm)),
innovation_yes_Mean = mean(innovation_yes, na.rm = TRUE),
innovation_yes_SD = sd(innovation_yes, na.rm = TRUE),
innovation_yes_Min = min(innovation_yes, na.rm = TRUE),
innovation_yes_Max = max(innovation_yes, na.rm = TRUE),
innovation_yes_Missing = sum(is.na(innovation_yes)),
R_D_yes_Mean = mean(R_D_yes, na.rm = TRUE),
R_D_yes_SD = sd(R_D_yes, na.rm = TRUE),
R_D_yes_Min = min(R_D_yes, na.rm = TRUE),
R_D_yes_Max = max(R_D_yes, na.rm = TRUE),
R_D_yes_Missing = sum(is.na(R_D_yes)),
Industrial_sector_Mean = mean(Industrial_sector, na.rm = TRUE),
Industrial_sector_SD = sd(Industrial_sector, na.rm = TRUE),
Industrial_sector_Min = min(Industrial_sector, na.rm = TRUE),
Industrial_sector_Max = max(Industrial_sector, na.rm = TRUE),
Industrial_sector_Missing = sum(is.na(Industrial_sector))
)
# Now pivot it nicely into a long table
library(tidyr)
descriptive_stats_long <- descriptive_stats %>%
pivot_longer(cols = everything(),
names_to = c("Variable", "Statistic"),
names_sep = "_",
values_to = "Value") %>%
pivot_wider(names_from = Statistic, values_from = Value)
# View the proper Descriptive Statistics Table
print(descriptive_stats_long)
library(dplyr)
# Select only the needed columns
data_summary <- data %>%
select(log_profits, log_training, log_equipment, Firm_Age, Employees_log,
Export_yes_no, Enterprise_Group, Small_Firm, innovation_yes, R_D_yes, Industrial_sector)
# Create Descriptive Statistics: mean, sd, min, max, missing
descriptive_stats <- data.frame(
Variable = names(data_summary),
Mean = sapply(data_summary, function(x) mean(x, na.rm = TRUE)),
SD = sapply(data_summary, function(x) sd(x, na.rm = TRUE)),
Min = sapply(data_summary, function(x) min(x, na.rm = TRUE)),
Max = sapply(data_summary, function(x) max(x, na.rm = TRUE)),
Missing = sapply(data_summary, function(x) sum(is.na(x)))
)
# View the clean table
print(descriptive_stats)
library(skimr)
# Select only the needed variables
data_selected <- data %>%
select(log_profits, log_training, log_equipment, Firm_Age, Employees_log,
Export_yes_no, Enterprise_Group, Small_Firm, innovation_yes, R_D_yes, Industrial_sector)
# Generate descriptive statistics
skim(data_selected)
